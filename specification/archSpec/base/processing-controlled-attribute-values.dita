<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept_afh_lx1_wp">
 <title>Processing controlled attribute values</title>
 <shortdesc>An enumeration of controlled values can be defined with hierarchical levels by nesting
    subject definitions. This affects how processors perform filtering and flagging.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>controlled values<indexterm>validation of</indexterm></indexterm>
        <indexterm>DITAVAL<indexterm>processing expectations</indexterm></indexterm>
        <indexterm>examples<indexterm>subjectScheme<indexterm>filtering or flagging a
              hierarchy</indexterm></indexterm></indexterm>
        <indexterm>examples<indexterm>processing<indexterm>filtering or flagging a
              hierarchy</indexterm></indexterm></indexterm>
        <indexterm>filtering and flagging<indexterm>processing expectations</indexterm></indexterm>
        <indexterm>processing<indexterm>controlled
              values</indexterm><indexterm>examples<indexterm>filtering or flagging a
              hierarchy</indexterm></indexterm></indexterm>
        <indexterm>processing expectations<indexterm>attribute values, hierarchies
            of</indexterm><indexterm>DITAVAL</indexterm><indexterm>filtering and
            flagging</indexterm></indexterm>
        <indexterm>subjectScheme<indexterm>examples<indexterm>filtering or flagging a
              hierarchy</indexterm></indexterm></indexterm>
        <indexterm>validating controlled values</indexterm>
      </keywords>
    </metadata>
  </prolog>
 <conbody>
    <!--<p> Processors <term outputclass="RFC-2119" rev="terminology">SHOULD</term> be aware of hierarchies of attribute values that are defined in subject scheme maps; processors <term outputclass="RFC-2119" rev="terminology">SHOULD</term> process them differently than they might if the attribute values were not defined in a hierarchy.</p>-->
    <p >The following algorithm applies when processors apply filtering and
      flagging rules to attribute values that are defined as a hierarchy of controlled values and
      bound to an enumeration:</p>
    <ol >
      <li>If an attribute specifies a value in the taxonomy, and a DITAVAL or other categorization
        tool is configured with that value, the rule matches.</li>
      <li>Otherwise, if the parent value in the taxonomy has a rule, that matches.</li>
      <li>Otherwise, continue up the chain in the taxonomy until a matching rule is found.</li>
    </ol>
    <p >The following behavior is expected of processors:</p>
    <ul>
      <li>Processors <term outputclass="RFC-2119">SHOULD</term> be aware of the
        hierarchies of attribute values that are defined in subject scheme maps<ph
          > for purposes of filtering, flagging, or other metadata-based
          categorization.</ph></li>
      <li>Processors <term outputclass="RFC-2119">SHOULD</term> validate that the
        values of attributes that are bound to controlled values contain only valid values from
        those sets. (The list of controlled values <ph >is</ph> not validated
        by basic XML parsers.) <ph >If the controlled values are part of a named key
          scope, the scope name is ignored for the purpose of validating the controlled
        values.</ph></li>
      <li>Processors <term outputclass="RFC-2119">SHOULD</term> check that all
        values listed for an attribute in a DITAVAL file are bound to the attribute by the subject
        scheme before filtering or flagging. If a processor encounters values that are not included
        in the subject scheme, it <term outputclass="RFC-2119">SHOULD</term> issue
        a warning.</li>
    </ul>
    <example id="example-hierarchy" otherprops="examples">
      <title>Example: A hierarchy of controlled values and conditional processing</title>
      <p>The following example illustrates a set of controlled values that contains a hierarchy. </p>
      <codeblock>&lt;subjectScheme>
  &lt;subjectdef keys="users">
    &lt;subjectdef keys="therapist">
      &lt;subjectdef keys="novice-therapist"/>
      &lt;subjectdef keys="expert-therapist"/>
    &lt;/subjectdef>
    &lt;subjectdef keys="oncologist"/>
    &lt;subjectdef keys="physicist"/>
    &lt;subjectdef keys="radiologist"/>
  &lt;/subjectdef>
  &lt;enumerationdef>
    &lt;attributedef name="audience"/>
    &lt;subjectdef keyref="users"/>
  &lt;/enumerationdef>
&lt;/subjectScheme></codeblock>
      <p>Processors that are aware of the hierarchy that is defined in the subject scheme map will
        handle filtering and flagging in the following ways:</p>
      <ul>
        <li >If "therapist" is excluded, both "novice-therapist" and
          "expert-therapist" are by default excluded (unless they are explicitly set to be
          included).</li>
        <li>If "therapist" is flagged and "novice-therapist" is not explicitly flagged, processors
          automatically should flag "novice<ph rev="errata-02">-therapist</ph>" since it is a type
          of therapist.</li>
      </ul>
      <!--<draft-comment author="Kristen Eberlein" time="5 February 2015"><p>Comment by Dick Hamilton in the targeted review:</p><p>"One thing that's not 100% clear to me is whether "therapist" is a valid value for an attribute bound to the "users" set. I know "users" isn't, but I couldn't tell whether "therapist" is considered a category name, and thus invalid, or not. I'm guessing it's not, but it's at least possible that only the top level category name is considered invalid. </p><p>UPDATE: I see from the first example in the example topic below that "therapist" would be a valid name. Since that's in a non-normative part, it might be a good idea to make this point in a normative section."</p></draft-comment>-->
      <!--<p><term outputclass="RFC-2119">SHOULD</term> apply filtering to all subsets of therapist. If filtering includes "novice" but does not explicitly exclude "therapist", processing <term outputclass="RFC-2119">SHOULD</term> include the general therapist content because it applies to "novice". If flagging explicity includes "therapist" but is not set explicitly for "novice", processing <term outputclass="RFC-2119">SHOULD</term> apply the "therapist" flag to the "novice" content as a special type of therapist.</p>-->
      <!-- Su-Laine: I've added _therapist to the values because if you also have
     novice and expert subcategories for oncologists, physicists, and radiologists you will need to
     provide unique values for each of them. Using a subject scheme map does not eliminate the need
     to have a unique attribute value for each audience type. -->
      <!-- Su-Laine: If the OT supports subject scheme maps, then it will do conditional processing
     differently than if it does not support subject scheme maps. In the example above, say you want
     to exclude audience="therapist". It the OT is aware of subject scheme maps, then it will also
     exclude audience="novice." If it is not aware, then audience="novice" will be
     included. -->
    </example>
  </conbody>
</concept>
