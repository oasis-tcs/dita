<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="specialization-overview">
 <title>Overview of specialization</title>
 <shortdesc>Specialization allows information architects to define new kinds of information (new
  structural types or new domains of information), while reusing as much of existing design and code
  as possible, and minimizing or eliminating the costs of interchange, migration, and
  maintenance.</shortdesc>
 <prolog>
  <metadata>
   <keywords>
    <indexterm>specialization<indexterm>overview</indexterm></indexterm>
   </keywords>
  </metadata>
 </prolog>
 <conbody>
  <p>Specialization modules enable information architects to create new element types and
   attributes. These new element types and attributes are derived from existing element types and
   attributes.</p>
  <p>In traditional XML applications, all semantics for a given element instance are bound to the
   element type, such as <xmlelement>para</xmlelement> for a paragraph or
    <xmlelement>title</xmlelement> for a title. The XML specification provides no built-in mechanism
   for relating two element types to say "element type B is a subtype of element type A".
   <!--However, in most documentation-focused XML applications there is often a clear hierarchy of types. For example, in a technical manual, there might be generic sections and more specialized sections, e.g. "Troubleshooting" or "Assembly Procedures". The presentation of the generic and specialized sections might be identical, but the more specialized sections might have more restrictive <ph rev="review-2">content models</ph> or include additional element types relevant only to those section types. While these relationships might be understood by authors and system implementers, the XML standard provides no direct way to express the relationship, to say explicitly "A Troubleshooting section is a generic section and must conform to all requirements of generic sections". --><!--Having created the element type <xmlelement>section</xmlelement> and implemented presentation processing for it and then having later created the element type <xmlelement>troubleshooting</xmlelement>, there is no obvious mechanism for having all <xmlelement>troubleshooting</xmlelement> elements <i>automatically</i> get the processing associated with <xmlelement>section</xmlelement> elements. To get that behavior someone has to explicitly update all processors involved to apply <xmlelement>section</xmlelement> processing to <xmlelement>troubleshooting</xmlelement>.--></p>
  <p>In contrast, the DITA specialization mechanism provides a standard mechanism for defining that
   an element type or attribute is derived from an ancestor type. <ph >This
    means that a specialized type inherits the semantics and default processing behavior from its
    ancestor type.</ph> Additional processing behavior optionally can be associated with the
   specialized descendant type.</p>
  <p otherprops="examples">For example, the <xmlelement>section</xmlelement> element type is part of
   the DITA base or core. It represents an organizational division in a topic. Within the task
   information type (itself a specialization of <xmlelement>topic</xmlelement>), the
    <xmlelement>section</xmlelement> element type is further specialized to other element types
   (such as <xmlelement>prereq</xmlelement> and <xmlelement>context</xmlelement>) that provide more
   precise semantics about the type of organizational division that they represent. The specialized
   element types inherit both semantic meaning and default processing from the ancestor
   elements.</p>
  <p>There are two types of DITA specializations:</p>
  <dl>
   <dlentry>
    <dt>Structural specialization</dt>
    <dd>
     <p >Structural specializations are developed from either topic or map
      types. Structural specializations enable information architect to add new document types to
      DITA.  The structures defined in the new document types either directly use or inherit from
      elements found in other document types. For example; concept, task, and reference are
      specialized from topic, whereas bookmap is specialized from map.</p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>Domain specialization</dt>
    <dd>Domain specializations are developed from elements defined with topic or map, or from the
      <xmlatt>props</xmlatt> or <xmlatt>base</xmlatt> attributes. They define markup for a specific
     information domain or subject area. Domain specializations can be added to document-type
     shells.</dd>
   </dlentry>
  </dl>
  <p>Each type of specialization module represents an <q>is a</q> hierarchy, in object-oriented terms,
   with each structural type or domain being a subclass of its parent. For example, a specialization
   of task is still a task, and a specialization of the user interface domain is still part of the
   user interface domain. A given domain can be used with any map or topic type. In addition,
   specific structural types might require the use of specific domains.</p>
  <p><ph >Use specialization when you need a new structural type or
    domain.</ph> Specialization is appropriate in the following circumstances:</p>
  <ul>
   <li>You need to create markup to represent new semantics (meaningful categories of information).
    This might enable you to have increased consistency or descriptiveness in your content
    model.</li>
   <li>You have specific needs for output processing and formatting that cannot be addressed using
    the current content model.</li>
  </ul>
  <p>Do not use specialization to simply eliminate element types from specific content models. Use
    <ph >constraint modules</ph> to <ph >restrict</ph> content
   models and attribute lists without changing semantics.</p>
  <!--<p>The DITA specialization feature provides a standard mechanism for saying explicitly, using normal XML syntax, "A Troubleshooting section is a generic section and must conform to all requirements of generic sections" and, having said that, makes it possible for generic section processing to be applied to troubleshooting sections <i>with no further effort</i>.</p>-->
 </conbody>
</concept>
