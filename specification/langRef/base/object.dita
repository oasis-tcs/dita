<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="object" xml:lang="en-us">
<title><xmlelement>object</xmlelement></title>
<shortdesc>The DITA <xmlelement>object</xmlelement> element corresponds to
    the HTML <xmlelement>object</xmlelement> element, and the attribute
    semantics derive from the HTML definitions. For example, the
      <xmlatt>type</xmlatt> attribute differs from the
      <xmlatt>type</xmlatt> attribute on many other DITA
    elements.</shortdesc>
<prolog><metadata>
<keywords><indexterm>objects<indexterm>overview</indexterm></indexterm>
                <indexterm>elements<indexterm>body<indexterm><xmlelement>object</xmlelement></indexterm></indexterm></indexterm>
                <indexterm>normative
                        statements<indexterm><xmlelement>object</xmlelement></indexterm></indexterm>
                <indexterm>rendering
                        expectations<indexterm><xmlelement>object</xmlelement></indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
        <section id="usage-information">
            <title>Usage information</title>
            <p>The <xmlelement>object</xmlelement> element enables authors to include animated
                images, applets, plug-ins, ActiveX controls, video clips, and other multimedia
                objects in a topic.</p>
      <p rev="review-c">The base DITA vocabulary also includes the
          <xmlelement>audio</xmlelement> and <xmlelement>video</xmlelement>
        elements, which are based on the corresponding elements in
        HTML5.</p>
        </section>
        <section id="rendering-expectations">
            <title>Rendering expectations</title>
            <p conkeyref="rendering/image-video"/>
            <p>When an object cannot be rendered in a meaningful way, processors <term
                    outputclass="RFC-2119">SHOULD</term> present the contents of the
                    <xmlelement>fallback</xmlelement> element, if it is present.</p>
        </section>
        <section id="attributes">
            <title>Attributes</title>
            <p>The following attributes are available on this element: <ph
                    conkeyref="reuse-attributes/ref-universalatts"/> and the attributes defined
                below.</p>
            <dl>
                <dlentry id="archive">
                    <dt id="attr-archive"><xmlatt>archive</xmlatt></dt>
                    <dd>Specifies a space-separated list of URIs indicating resources needed by the
                        object. These resources might include those URIs specified by the
                            <xmlatt>classid</xmlatt> and <xmlatt>data</xmlatt> attributes.
                        Preloading these resources usually results in faster load times for objects.
                        The URIs in the list should be relative to the URI specified in the
                            <xmlatt>codebase</xmlatt> attribute.</dd>
                </dlentry>
                <dlentry id="archivekeyrefs">
                    <dt id="attr-archivekeyrefs"><xmlatt>archivekeyrefs</xmlatt></dt>
                    <dd>Specifies key references to one or more archives, as for
                            <xmlatt>archive</xmlatt>. The value is a space-separated list of key
                        names. Each resolvable key reference is treated as a URI as though it had
                        been specified on the <xmlatt>archive</xmlatt> attribute. When specified,
                        and at least one key name is resolvable, the key-provided archive list is
                        used. If <xmlatt>archive</xmlatt> is specified, it is used as a fallback
                        when no key names can be resolved to a URI. </dd>
                </dlentry>
                <dlentry id="classid">
                    <dt id="attr-classid"><xmlatt>classid</xmlatt></dt>
                    <dd>Contains a URI that specifies the location of an object&apos;s
                        implementation. It can be used together with the <xmlatt>data</xmlatt>
                        attribute which is specified relative to the value of the
                            <xmlatt>codebase</xmlatt> attribute. </dd>
                </dlentry>
                <dlentry id="classidkeyref">
                    <dt id="attr-classidkeyref"><xmlatt>classidkeyref</xmlatt></dt>
                    <dd>Specifies a key reference to the URI that specifies the location of an
                        object's implementation, as for <xmlatt>classid</xmlatt>. When specified,
                        and the key is resolvable, the key-provided class ID URI is used. If
                            <xmlatt>classid</xmlatt> is specified, it is used as a fallback when the
                        key cannot be resolved to a URI. </dd>
                </dlentry>
                <dlentry id="codebase">
                    <dt id="attr-codebase"><xmlatt>codebase</xmlatt></dt>
                    <dd>Specifies the base URI used for resolving the relative URI values given for
                            <xmlatt>classid</xmlatt>, <xmlatt>data</xmlatt>, and
                            <xmlatt>archive</xmlatt> attributes. If <xmlatt>codebase</xmlatt> is not
                        set, the default is the base URI of the current element.</dd>
                </dlentry>
                <dlentry id="codebasekeyref">
                    <dt id="attr-codebasekeyref"><xmlatt>codebasekeyref</xmlatt></dt>
                    <dd>Specifies a key reference to the base URI used for resolving other
                        attributes, as for <xmlatt>codebase</xmlatt>. When specified, and the key is
                        resolvable, the key-provided code base URI is used. If
                            <xmlatt>codebase</xmlatt> is specified, it is used as a fallback if the
                        key cannot be resolved to a URI. If no URI results from processing
                            <xmlatt>codebasekeyref</xmlatt> and <xmlatt>codebase</xmlatt> is not
                        specified, the default is the base URL of the current element.</dd>
                </dlentry>
                <dlentry id="data">
                    <dt id="attr-data"><xmlatt>data</xmlatt></dt>
                    <dd>Contains a reference to the location of an object&apos;s data. If this
                        attribute is a relative URL, it is specified relative to the value of the
                            <xmlatt>codebase</xmlatt> attribute. If this attribute is set, the
                            <xmlatt>type</xmlatt> attribute should also be set.</dd>
                </dlentry>
                <dlentry id="datakeyref">
                    <!-- KJE: Modified to be parallel to the desciption of  @datakeyref in the audio and video topics-->
                    <dt id="attr-datakeyref"><xmlatt>datakeyref</xmlatt></dt>
                    <dd>Provides a key reference to the object. When specified and the key is
                        resolvable, the key-provided URI is used. A key that has no associated
                        resource, only link text, is considered to be unresolved. If
                            <xmlatt>data</xmlatt> is specified, it is used as a fallback when the
                        key cannot be resolved to a resource.</dd>
                </dlentry>
                <dlentry id="declare">
                    <dt id="attr-declare"><xmlatt>declare</xmlatt></dt>
                    <dd>Specifies whether the current object definition is only a declaration. When
                        this attribute is set to "declare", the current object definition is a
                        declaration only. The object must be instantiated by a later nested object
                        definition referring to this declaration. The only allowable value is
                        "declare".</dd>
                </dlentry>
                <dlentry conkeyref="reuse-attributes/image-height" id="height">
                    <dt/>
                    <dd/>
                </dlentry>
                <dlentry id="name">
                    <dt id="attr-name"><xmlatt>name</xmlatt></dt>
          <dd rev="review-c">Specifies a valid browsing context name.</dd>
                </dlentry>
                <dlentry id="standby">
                    <dt id="attr-standby"><xmlatt>standby</xmlatt></dt>
                    <dd>Contains a message to be displayed while an object is loading.</dd>
                </dlentry>
                <dlentry id="tabindex">
                    <dt id="attr-tabindex"><xmlatt>tabindex</xmlatt></dt>
                    <dd>Specifies the position of the object in tabbing order.</dd>
                </dlentry>
                <dlentry id="type">
                    <dt id="attr-type"><xmlatt>type</xmlatt></dt>
                    <dd>Indicates the content type (MIME type) for the data specified by the
                            <xmlatt>data</xmlatt>
                        <ph>or <xmlatt>datakeyref</xmlatt>
                        </ph> attribute. This attribute should be set when the <xmlatt>data</xmlatt>
                        attribute is set to avoid loading unsupported content types. Note that this
                        differs from the <xmlatt>type</xmlatt> attribute on many other DITA elements
                        (it specifies a MIME type rather than a content type). <ph>If
                                <xmlatt>type</xmlatt> is not specified, the effective type value for
                            the key named by the <xmlatt>datakeyref</xmlatt> attribute is used as
                            the this attribute's value.</ph></dd>
                </dlentry>
                <dlentry id="usemap">
                    <dt id="attr-usemap"><xmlatt>usemap</xmlatt></dt>
                    <dd>Indicates that a client-side image map is to be used. An image map specifies
                        active geometric regions of an included object and assigns a link to each
                        region. When a link is selected, a document <ph>might</ph> be retrieved or a
                        program <ph>might</ph> run on the server.</dd>
                </dlentry>
                <dlentry conkeyref="reuse-attributes/image-width" id="width">
                    <dt/>
                    <dd/>
                </dlentry>
            </dl>
        </section>
<example id="example" otherprops="examples">
            <title rev="review-c">Examples</title>
      <p>This section contains examples of how the
          <xmlelement>object</xmlelement> element can be used.</p>
      <fig>
        <title>Referencing a flash video</title>
        <p>The following code sample shows how an
            <xmlelement>object</xmlelement> element can be used to
          reference a flash video:</p>
        <codeblock>
&lt;object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
   codebase="http://download.macromedia.com/pub/shockwave/cabs/
   flash/swflash.cab#version=6,0,0,0"
   data="cutkey370.swf"
   type="application/x-shockwave-flash"
   height="280"
   width="370"
   id="cutkey370"&gt;
     &lt;desc&gt;Video that demonstrates how to cut keys from the system unit.&lt;/desc&gt;
     &lt;fallback>Media not available.&lt;/fallback>
     &lt;param name="movie" value="cutkey370.swf"/&gt;
     &lt;param name="quality" value="high"/&gt;
     &lt;param name="bgcolor" value="#FFFFFF"/&gt;
&lt;/object&gt;
</codeblock>
      </fig>
      <fig>
        <title>Referencing a PDF</title>
        <p>The following code sample shows how an
            <xmlelement>object</xmlelement> element can be used to render a
          PDF as an inline object:</p>
        <codeblock>
&lt;object type="application/pdf"
        data="resources/pdf/terms.pdf"
        width="300"
        height="200"
        id="terms-and-conditions">
   &lt;desc&gt;Terms and conditions for using the site.&lt;/desc&gt;
   &lt;fallback>PDF cannot be displayed; please download the terms and 
             conditions from &lt;xref keyref="site-terms"/>.&lt;/fallback>
&lt;/object&gt;</codeblock>
      </fig>
            <fig id="fig_o2l_bfb_4k">
                <title>Object with reference to video using key reference on the
                        <xmlelement>param</xmlelement> elements</title>
                <p>The following code sample shows how key definitions can
          be used to reference supporting resources for an
            <xmlelement>object</xmlelement>:</p>
                <codeblock>&lt;object id="E5123_026.mp4"
      width="300" height="300">
  &lt;fallback>Media not available.&lt;/fallback>
  &lt;param name="poster" <b>keyref="E5123_026_poster"</b> />
  &lt;param name="source" <b>keyref="E5123_026_video"</b> />
&lt;/object></codeblock>
                <p>In this scenario, the keys could be defined as follows:<codeblock>&lt;map>
  &lt;!-- ... -->
  &lt;keydef keys="E5123_026_poster"
      href="../images/E5123_026_poster.png"
      type="video/mp4"
  />
  &lt;keydef keys="E5123_026_video"
      href="../media/E5123_026_poster.mp4"
      type="video/mp4"
  />
  &lt;!-- ... -->
&lt;/map></codeblock></p>
            </fig>
            <fig>
                <title>Object with indirect reference to a flash file</title>
                <p>The following code sample shows how key definitions can
          be used to reference the main content for an
            <xmlelement>object</xmlelement>:</p>
                <codeblock>&lt;object id="cutkey370"
    <b>classidkeyref="video_classid"</b>
    <b>codebasekeyref="video_codebase"</b>
    <b>datakeyref="cutkey370"</b>
    height="280"
    width="370">
  &lt;desc>Video illustration of how to cut a key&lt;/desc>
  &lt;fallback>Media not available.&lt;/fallback>
  &lt;param name="movie" <b>keyref="cutkey370"</b>/>
  &lt;param name="quality" value="high"/>
  &lt;param name="bgcolor" value="#FFFFFF"/>
&lt;/object></codeblock>
                <p>In this scenario, the keys could be defined as follows:<codeblock>&lt;map>
  &lt;!-- ... -->
  &lt;!-- NOTE: Using @scope="external" because the class ID is a URI
       that is not intended to be directly resolved. -->
  &lt;keydef keys="video_classid"
    href="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
    scope="external" />

  &lt;!-- NOTE: Using @scope="external" to avoid systems trying to
             download this file when they don't need to. -->
  &lt;keydef keys="video_codebase"
    href="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0"
    format="shockwave"
    scope="external" />

  &lt;!-- Using @scope="external" here because the referenced URL is not intended
       to be resolved in isolation but relative to the codebase URI. -->
  &lt;keydef keys="cutkey370"
    href="cutkey370.swf"
    type="application/x-shockwave-flash"
    scope="external" />
  &lt;!-- ... -->
&lt;/map></codeblock></p>
            </fig>
        </example>
</refbody>
</reference>
