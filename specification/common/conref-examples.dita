<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conref-examples" xml:lang="en-us">
 <title>Conref: Examples</title>
 <shortdesc>Contains <xmlelement>example</xmlelement> elements that are reused throughout the DITA
  specification.</shortdesc>
 <conbody>
  <example id="ditavalref" otherprops="examples">
    <title>Example</title>
    <p>See <xref href="../archSpec/base/examples-of-branch-filter.dita"/> for several examples of
the <xmlelement>ditavalref</xmlelement> element.</p>
   </example>
    <example id="example-subjectScheme" otherprops="examples">
      <title>Example</title>
      <codeblock id="codesample">&lt;subjectScheme>
  &lt;!-- Pull in a scheme that defines unix OS values -->
  &lt;schemeref href="unixOS.ditamap"/>
  &lt;!-- Define new OS values that are merged with those in the unixOS scheme -->
  &lt;subjectdef keys="operating-systems">
    &lt;subjectdef keys="linux"/>
    &lt;subjectdef keys="windows"/>
    &lt;subjectdef keys="zOS"/>
  &lt;/subjectdef>
  &lt;!-- Define application values -->
  &lt;subjectdef keys="applications">
    &lt;subjectdef keys="apache-server" href="subject/apache.dita"/>
    &lt;subjectdef keys="my-sql"      href="subject/sql.dita"/>
  &lt;/subjectdef>

  &lt;!-- Define an enumeration of the platform attribute, equal to
       each value in the OS subject. This makes the following values
       valid for the platform attribute: linux, windows, zOS -->
  &lt;enumerationdef>
    &lt;attributedef name="platform"/>
    &lt;subjectdef keyref="os"/>
  &lt;/enumerationdef>
  &lt;!-- Define an enumeration of the otherprops attribute, equal to
       each value in the application subjects.
       This makes the following values valid for the otherprops attribute:
       apache-server, my-sql -->
  &lt;enumerationdef>
    &lt;attributedef name="otherprops"/>
    &lt;subjectdef keyref="applications"/>
  &lt;/enumerationdef>
&lt;/subjectScheme></codeblock>
    </example>
    <example id="example-subjectHead" otherprops="examples">
      <title>Example</title>
      <p>In this example the <q>Server setup</q> label doesn't classify content but, when selected, is
        equivalent to the union of its child subjects. That is, the heading covers content about
        planning for any application, installing for any application, any task for web servers, or
        any task for database servers.</p>
      <codeblock>&lt;subjectScheme toc="yes" search="no">
  &lt;!-- ... -->
  &lt;subjectHead>
    &lt;subjectHeadMeta>
      &lt;navtitle>Server setup&lt;/navtitle>
    &lt;/subjectHeadMeta>
    &lt;subjectdef href="planningTaskType.dita"/>
    &lt;subjectdef href="installingTaskType.dita"/>
    &lt;subjectdef href="webServerApp.dita"/>
    &lt;subjectdef href="databaseApp.dita"/>
  &lt;/subjectHead>
  &lt;!-- ... -->
&lt;/subjectScheme></codeblock>
    </example>
    <example id="example-subjectref" otherprops="examples">
      <title>Example</title>
      <p>In the following example, the map is classified as covering the Linux subject, and
          <filepath>developing-web-applications.dita</filepath> is classified as covering the Web
        and development subjects. These subjects (and their keys) are defined externally in a
        subject scheme map; in order to reference the subject directly without the subject scheme
        map, the <xmlatt>href</xmlatt> attribute would be used in place of
        <xmlatt>keyref</xmlatt>.</p>
      <codeblock>&lt;map>
  &lt;title>Working with Linux&lt;/title>
  &lt;topicsubject keyref="linux"/>
  &lt;!-- ... -->
  &lt;topicref href="developing-web-applications.dita">
    &lt;topicsubject>
      <b>&lt;subjectref keyref="web"/></b>
      <b>&lt;subjectref keyref="development"/></b>
    &lt;/topicsubject>
    &lt;!-- ... -->
  &lt;/topicref>
  &lt;!-- ... -->
&lt;/map></codeblock>
    </example>
 </conbody>
</concept>
